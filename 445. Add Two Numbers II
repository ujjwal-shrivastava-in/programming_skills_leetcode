class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL) return head;
        ListNode* curr = head;
        vector<int> rev;
        while(curr != NULL){
            rev.push_back(curr->val);
            curr = curr -> next;
        }
        reverse(rev.begin(),rev.end());
        curr = head;

        for(int i=0;i<rev.size();i++){
            curr->val = rev[i];
            curr = curr->next;
        }

        return head;
    }

    ListNode* addTwoNumbers2(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode *head1 = l1,*head2 = l2;
        ListNode *ans = new ListNode(0), *curr = ans;

        while(head1 != NULL || head2 != NULL){
            int val1 = (head1 != NULL) ? head1->val : 0;
            int val2 = (head2 != NULL) ? head2->val : 0;
            int sum = val1 + val2 + carry;

            carry = sum / 10;
            int digit = sum % 10;

            curr->next = new ListNode(digit);
            curr = curr->next;

            if(head1 != NULL) head1 = head1->next;
            if(head2 != NULL) head2 = head2->next;
        }

        if(carry > 0){
            curr -> next = new ListNode(carry);
        }

        ListNode *res = ans->next;
        delete ans;
        return res;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        l1 = reverseList(l1);
        l2 = reverseList(l2);

        ListNode* ans = new ListNode(0);

        ans = addTwoNumbers2(l1,l2);

        ans = reverseList(ans);

        return ans;
    }
};
